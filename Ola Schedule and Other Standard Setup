USE [master];
GO
--Change error log retention from 6 to 26
EXEC xp_instance_regwrite
     N'HKEY_LOCAL_MACHINE',
     N'Software\Microsoft\MSSQLServer\MSSQLServer',
     N'NumErrorLogs',
     REG_DWORD,
     26;
GO
--Keep MSDB job history to 20k rows and max 500 rows per job
USE [msdb];
GO
EXEC msdb.dbo.sp_set_sqlagent_properties
     @jobhistory_max_rows = 20000,
     @jobhistory_max_rows_per_job = 500;
GO
IF NOT EXISTS
(
    SELECT *
    FROM sys.configurations
    WHERE name LIKE 'backup comp%'
          AND value_in_use = 1
)
    BEGIN
        EXEC sp_configure
             'backup compression default',
             1;
        RECONFIGURE WITH OVERRIDE;
END;
GO
USE [master];
GO
DECLARE @cpu_count INT, @file_count INT, @logical_name SYSNAME, @file_name NVARCHAR(520), @physical_name NVARCHAR(520), @size INT, @max_size INT, @growth INT, @alter_command NVARCHAR(MAX);
SELECT @physical_name = physical_name,
       @size = size / 128,
       @max_size = max_size / 128,
       @growth = growth / 128
FROM tempdb.sys.database_files
WHERE name = 'tempdev';
SELECT @file_count = COUNT(*)
FROM tempdb.sys.database_files
WHERE type_desc = 'ROWS';
SELECT @cpu_count = cpu_count
FROM sys.dm_os_sys_info;
IF @cpu_count > 8
    SET @cpu_count = 8;
WHILE @file_count < @cpu_count -- Add * 0.25 here to add 1 file for every 4 cpus, * .5 for every 2 etc.
    BEGIN
        SELECT @logical_name = 'tempdev'+CAST(@file_count AS NVARCHAR);
        SELECT @file_name = REPLACE(@physical_name, 'tempdb.mdf', @logical_name+'.ndf');
        SELECT @alter_command = 'ALTER DATABASE [tempdb] ADD FILE ( NAME =N'''+@logical_name+''', FILENAME =N'''+@file_name+''', SIZE = '+CAST(@size AS NVARCHAR)+'MB, FILEGROWTH = '+CAST(@growth AS NVARCHAR)+'MB )';
        PRINT @alter_command;
        EXEC sp_executesql
             @alter_command;
        SELECT @file_count = @file_count + 1;
    END;

--AutoGrowth

CREATE TABLE #ConfigAutoGrowth
(iDBID         INT,
 sDBName       SYSNAME,
 vFileName     VARCHAR(MAX),
 vGrowthOption VARCHAR(12)
);
PRINT 'Table #ConfigAutoGrowth Created';
GO  
-- Inserting data into staging table  
INSERT INTO #ConfigAutoGrowth
       SELECT SD.database_id,
              SD.name,
              SF.name,  
    --sf.fileid,   
    --SUSER_NAME(owner_sid),  
    --recovery_model_desc,  
              CASE SF.status&0x100000
                  WHEN 1048576
                  THEN 'Percentage'
                  WHEN 0
                  THEN 'MB'
              END AS 'GROWTH Option'
       FROM SYS.SYSALTFILES SF
            JOIN SYS.DATABASES SD ON SD.database_id = SF.dbid;
GO  
  
-- Dynamically alters the file to set auto growth option to fixed mb   
DECLARE @name VARCHAR(MAX); -- Database Name  
DECLARE @dbid INT; -- DBID  
DECLARE @vFileName VARCHAR(MAX); -- Logical file name  
DECLARE @vGrowthOption VARCHAR(MAX); -- Growth option  
DECLARE @Query VARCHAR(MAX); -- Variable to store dynamic sql  


DECLARE db_cursor CURSOR
FOR
    SELECT idbid,
           sdbname,
           vfilename,
           vgrowthoption
    FROM #ConfigAutoGrowth
    WHERE sdbname NOT IN('master', 'msdb');   
--AND vGrowthOption  = 'Percentage' or 'Mb' 

OPEN db_cursor;
FETCH NEXT FROM db_cursor INTO @dbid, @name, @vfilename, @vgrowthoption;
WHILE @@FETCH_STATUS = 0
    BEGIN
        PRINT 'Changing AutoGrowth option for database:- '+UPPER(@name);
        SET @Query = 'ALTER DATABASE '+@name+' MODIFY FILE (NAME = '+@vFileName+',FILEGROWTH = 256MB)';
        EXECUTE (@Query);
        FETCH NEXT FROM db_cursor INTO @dbid, @name, @vfilename, @vgrowthoption;
    END;
CLOSE db_cursor; -- Closing the curson  
DEALLOCATE db_cursor;  -- deallocating the cursor  

GO  
-- Querying system views to see if the changes are applied  
DECLARE @SQL VARCHAR(8000), @sname VARCHAR(3);
SET @SQL = ' USE ?
SELECT ''?'' [Dbname]
,[name] [Filename]
,CASE is_percent_growth
WHEN 1 THEN CONVERT(VARCHAR(5),growth)+''%''
ELSE CONVERT(VARCHAR(20),(growth/128))+'' MB''
END [Autogrow_Value]
,CASE max_size
WHEN -1 THEN CASE growth
WHEN 0 THEN CONVERT(VARCHAR(30),''Restricted'')
ELSE CONVERT(VARCHAR(30),''Unlimited'') END
ELSE CONVERT(VARCHAR(25),max_size/128)
END [Max_Size]
FROM ?.sys.database_files';
IF EXISTS
(
    SELECT 1
    FROM tempdb..sysobjects
    WHERE name = '##Fdetails'
)
    DROP TABLE ##Fdetails;
CREATE TABLE ##Fdetails
(Dbname         VARCHAR(50),
 Filename       VARCHAR(50),
 Autogrow_Value VARCHAR(15),
 Max_Size       VARCHAR(30)
);
INSERT INTO ##Fdetails
EXEC sp_msforeachdb
     @SQL;
SELECT *
FROM ##Fdetails
ORDER BY Dbname;
  
--Dropping the staging table  
DROP TABLE #ConfigAutoGrowth;
GO
USE [msdb]
GO
EXEC msdb.dbo.sp_set_sqlagent_properties 
		@alert_replace_runtime_tokens=1
GO
--https://docs.microsoft.com/en-us/sql/t-sql/database-console-commands/dbcc-traceon-trace-flags-transact-sql
DBCC TRACEON (
3226  --Suppress Successful backup message from errorlog.
,3042 --For large database backup, it will grow as needed.
,1117 --All files in filegroup will grow, mostly used for tempdb optimization but affects all dbs with multiple files.
,1118 --Reduce SGAM contention, in 2016 is controlled by SET MIXED_PAGE_ALLOCATION option of ALTER DATABASE and has no effect.
,4199 --Query Optimizer
,2371 --Auto update statistics algorithm change, in 2016 it has no effect - enabled by default.
,-1)
--DBCC TRACESTATUS
