USE master;
GO
IF OBJECT_ID(N'vwDBList') IS NOT NULL
    DROP VIEW [dbo].[vwDBList];
GO
CREATE VIEW [dbo].[vwDBList]
AS
     SELECT sd.[name] AS 'DBName', 
            SUBSTRING(SUSER_SNAME(sd.[owner_sid]), 1, 24) AS 'Owner'
     FROM master.sys.databases sd
     WHERE HAS_DBACCESS(sd.[name]) = 1
           AND sd.[is_read_only] = 0
           AND sd.[state_desc] = 'ONLINE'
           AND sd.[user_access_desc] = 'MULTI_USER'
           AND sd.[is_in_standby] = 0;
GO
CREATE TABLE #temprole
(DBName     VARCHAR(128), 
 UserName   VARCHAR(128), 
 LoginSID   VARBINARY(128), 
 RoleName   VARCHAR(2000), 
 CreateDate DATETIME, 
 UpdateDate DATETIME
);
INSERT INTO #temprole
EXEC sp_MSforeachdb 
     'IF EXISTS (select TOP (1) 1 from sys.databases sd inner join dbo.vwDBList vw on sd.name = vw.DBName
where sd.name = "?" ) BEGIN with cte
as
(
select "?" DBName, b.name as UserName,b.sid, c.name as RoleName , b.createdate,b.updatedate
from [?].dbo.sysmembers a
 join [?].dbo.sysusers b
 on a.memberuid = b.uid join [?].dbo.sysusers c
on a.groupuid = c.uid
--where b.createdate > CONVERT(varchar(8),getdate(),112)
)
select DISTINCT DBName, UserName, sid, RoleName = substring((select ( '', '' + RoleName)
from cte b
where a.UserName = b.UserName
FOR XML PATH ('''')
),3,8000),createdate, updatedate FROM cte a
end
';
DECLARE @SQL VARCHAR(MAX);
SET @SQL = '';
SELECT @SQL = @SQL + 'SELECT ' + QUOTENAME([name], '''') + ' COLLATE Latin1_General_CI_AS AS [DBName], u.[name] COLLATE Latin1_General_CI_AS ' + 'FROM ' + QUOTENAME([name]) + '.dbo.sysusers u ' + 'WHERE u.issqluser = 1 ' + 'AND (u.sid is not null AND u.sid <> 0x0) ' + 'AND NOT EXISTS (SELECT 1 FROM master.dbo.syslogins l WHERE l.sid = u.sid) ' + 'UNION '
FROM master.dbo.sysdatabases sd
     INNER JOIN master..vwDBList vw ON sd.name = vw.dbname;
SET @SQL = LEFT(@SQL, LEN(@SQL) - 5);
CREATE TABLE #DBUsers
(DBName   VARCHAR(255), 
 Username VARCHAR(255)
);
INSERT INTO #DBUsers
(DBName, 
 Username
)
EXEC (@SQL);
SELECT @@SERVERNAME ServerName, 
       t.*, 
       sp.type_desc
INTO #tmpDatabaseRoles
FROM #temprole t
     LEFT JOIN #DBUsers d ON t.DBName = d.DBName
                             AND t.UserName = d.Username
     INNER JOIN sys.server_principals sp ON sp.sid = t.LoginSID
WHERE t.UserName NOT LIKE 'dbo'
      AND t.UserName NOT LIKE '##%';
BEGIN TRY
    DECLARE @lname VARCHAR(256);
    CREATE TABLE #tmpGroupDetail
    (AccountName       VARCHAR(256), 
     Type              VARCHAR(128), 
     Privilege         VARCHAR(128), 
     Mapped_Login_Name VARCHAR(256), 
     Permission_Path   VARCHAR(256)
    );
    DECLARE Roles CURSOR
    FOR SELECT UserName
        FROM #tmpDatabaseRoles
        WHERE type_desc = 'WINDOWS_GROUP';
    OPEN Roles;
    FETCH NEXT FROM Roles INTO @lname;
    WHILE @@FETCH_STATUS = 0
        BEGIN
            INSERT INTO #tmpGroupDetail
            EXEC xp_logininfo 
                 @lname, 
                 members;
            FETCH NEXT FROM Roles INTO @lname;
        END;
    IF OBJECT_ID('tempdb..#DBRoleDetails') IS NOT NULL
        DROP TABLE #DBRoleDetails;
    SELECT A.ServerName, 
           A.DBName, 
           A.UserName LoginName, 
           ISNULL(B.AccountName, 'Individual Login') GroupMembers, 
           A.RoleName DatabaseRoles, 
           A.CreateDate, 
           A.UpdateDate, 
           A.type_desc
    INTO #DBRoleDetails
    FROM #tmpDatabaseRoles A
         LEFT JOIN #tmpGroupDetail B ON a.UserName = b.Permission_Path
    ORDER BY type_desc;
    CLOSE Roles;
    DEALLOCATE Roles;
END TRY
BEGIN CATCH
    TRUNCATE TABLE #DBRoleDetails;
    --SELECT ERROR_NUMBER() AS ErrorNumber
    --     ,ERROR_SEVERITY() AS ErrorSeverity
    --     ,ERROR_STATE() AS ErrorState
    --     ,ERROR_PROCEDURE() AS ErrorProcedure
    --     ,ERROR_LINE() AS ErrorLine
    --     ,ERROR_MESSAGE() AS ErrorMessage;
    INSERT INTO #DBRoleDetails
           SELECT A.ServerName, 
                  A.DBName, 
                  A.UserName LoginName,
                  CASE
                      WHEN type_desc = 'WINDOWS_GROUP'
                      THEN 'Not able to populate group members'
                      ELSE 'Individual Login'
                  END GroupMembers, 
                  A.RoleName DatabaseRole, 
                  A.CreateDate, 
                  A.UpdateDate, 
                  A.type_desc
           FROM #tmpDatabaseRoles A
           ORDER BY type_desc;
END CATCH;
WITH cte
     AS (SELECT b.name LoginName, 
                ISNULL(c.name, 'Public') ServerRole, 
                b.type_desc, 
                b.create_date CreateDate, 
                b.modify_date ModifyDate, 
                b.is_disabled Disabled,
                --Audit.HostName,
                CASE
                    WHEN d.is_policy_checked = 1
                    THEN 'Yes'
                    ELSE 'No'
                END PolicyChecked,
                CASE
                    WHEN d.is_expiration_checked = 1
                    THEN 'Yes'
                    ELSE 'No'
                END ExpirationChecked
         FROM sys.server_role_members a
              RIGHT JOIN sys.server_principals b ON a.member_principal_id = b.principal_id
              LEFT JOIN sys.server_principals c ON a.role_principal_id = c.principal_id
              LEFT JOIN sys.sql_logins d ON b.name = d.name
         --     LEFT JOIN
         --(
         --    SELECT DISTINCT
         --           I.loginname,
         --           I.HostName
         --    FROM sys.traces T
         --         CROSS APPLY ::fn_trace_gettable
         --    (CASE
         --         WHEN CHARINDEX('_', T.[path]) <> 0
         --         THEN SUBSTRING(T.PATH, 1, CHARINDEX('_', T.[path])-1)+'.trc'
         --         ELSE T.[path]
         --     END, T.max_files
         --    ) I
         --         LEFT JOIN sys.server_principals S ON CONVERT(VARBINARY(MAX), I.loginsid) = S.sid
         --    WHERE T.id = 1
         --          AND I.LoginSid IS NOT NULL
         --          AND HostName IS NOT NULL
         --) Audit ON Audit.LoginName = b.name
         )
     SELECT DISTINCT 
            @@SERVERNAME ServerName, 
            LoginName, 
            ServerRole = SUBSTRING(
     (
         SELECT(', ' + ServerRole)
         FROM cte b
         WHERE a.LoginName = b.LoginName FOR XML PATH('')
     ), 3, 8000),
            --HostName = SUBSTRING(
            --                    (
            --                        SELECT(', '+HostName)
            --                        FROM cte b
            --                        WHERE a.LoginName = b.LoginName FOR XML PATH('')
            --                    ), 3, 8000),
            CreateDate, 
            ModifyDate, 
            type_desc, 
            CONVERT(VARCHAR(3), DATEDIFF(dd, modifydate, GETDATE())) + ' Days ago' AS PasswordChanged, 
            Disabled, 
            LOGINPROPERTY(loginname, 'DaysUntilExpiration') DaysUntilExpiration, 
            LOGINPROPERTY(loginname, 'IsExpired') IsExpired, 
            LOGINPROPERTY(loginname, 'IsMustChange') IsMustChange, 
            PolicyChecked, 
            ExpirationChecked
     INTO #tmpServerRoles
     FROM cte a
     WHERE type_desc NOT IN('SERVER_ROLE', 'CERTIFICATE_MAPPED_LOGIN')
     AND LoginName NOT LIKE '##%'
     AND LoginName NOT LIKE 'NT %';
BEGIN TRY
    TRUNCATE TABLE #tmpGroupDetail;
    DECLARE Roles CURSOR
    FOR SELECT LoginName
        FROM #tmpServerRoles
        WHERE type_desc = 'WINDOWS_GROUP';
    OPEN Roles;
    FETCH NEXT FROM Roles INTO @lname;
    WHILE @@FETCH_STATUS = 0
        BEGIN
            INSERT INTO #tmpGroupDetail
            EXEC xp_logininfo 
                 @lname, 
                 members;
            FETCH NEXT FROM Roles INTO @lname;
        END;
    IF OBJECT_ID('tempdb..#ServerRoleDetails') IS NOT NULL
        DROP TABLE #ServerRoleDetails;
    SELECT a.ServerName, 
           a.LoginName, 
           ISNULL(b.AccountName, 'Individual Login') GroupMembers, 
           a.type_desc, 
           a.ServerRole, 
           a.CreateDate, 
           a.ModifyDate, 
           a.PasswordChanged, 
           a.Disabled, 
           a.DaysUntilExpiration, 
           a.IsExpired, 
           a.IsMustChange, 
           a.PolicyChecked, 
           a.ExpirationChecked
    INTO #ServerRoleDetails
    FROM #tmpServerRoles a
         LEFT JOIN #tmpGroupDetail b ON a.LoginName = b.Permission_Path
    ORDER BY type_desc;
    CLOSE Roles;
    DEALLOCATE Roles;
END TRY
BEGIN CATCH
    TRUNCATE TABLE #ServerRoleDetails;
    INSERT INTO #ServerRoleDetails
           SELECT a.ServerName, 
                  a.LoginName,
                  CASE
                      WHEN type_desc = 'WINDOWS_GROUP'
                      THEN 'Not able to populate group members'
                      ELSE 'Individual Login'
                  END GroupMembers, 
                  a.type_desc, 
                  a.ServerRole, 
                  a.CreateDate, 
                  a.ModifyDate, 
                  a.PasswordChanged, 
                  a.Disabled, 
                  a.DaysUntilExpiration, 
                  a.IsExpired, 
                  a.IsMustChange, 
                  a.PolicyChecked, 
                  a.ExpirationChecked
           FROM #tmpServerRoles a
           ORDER BY type_desc;
    CLOSE Roles;
    DEALLOCATE Roles;
END CATCH;
SELECT a.ServerName, 
       a.LoginName, 
       b.LoginName DBUser, 
       a.GroupMembers, 
       a.type_desc, 
       a.ServerRole, 
       b.DBName, 
       b.DatabaseRoles, 
       a.CreateDate, 
       a.ModifyDate
FROM #ServerRoleDetails A
     LEFT JOIN #DBRoleDetails B ON a.LoginName = B.LoginName;
DROP TABLE #ServerRoleDetails;
DROP TABLE #tmpGroupDetail;
DROP TABLE #tmpServerRoles;
GO
DROP TABLE #temprole;
DROP TABLE #DBUsers;
DROP TABLE #tmpDatabaseRoles;
DROP TABLE #DBRoleDetails;
GO
